# -*- coding: utf-8 -*-

import json  # 用于JsonWorker
import random

import time

from src.lib.oauth.zhihu_oauth import ZhihuClient
from src.lib.wechat_parser.wechat import WechatColumnParser, WechatArticleParser
from src.tools.db import DB
from src.tools.debug import Debug
from src.tools.http import Http
from src.tools.match import Match
from src.tools.type import Type
from collections import OrderedDict

class Worker(object):
    """
    :type zhihu_client src.lib.oauth.zhihu_oauth.ZhihuClient
    """
    zhihu_client = None

    @staticmethod
    def set_zhihu_client(zhihu_client):
        """
        :type zhihu_client src.lib.oauth.zhihu_oauth.ZhihuClient
        :return: None
        """
        Worker.zhihu_client = zhihu_client
        return

    @staticmethod
    def distribute(task):
        """
        将外界传入的任务分发给各个抓取类
        :type task src.container.task.Task | src.container.task.AnswerTask | src.container.task.QuestionTask | src.container.task.TopicTask| src.container.task.CollectionTask | src.container.task.AuthorTask | src.container.task.ColumnTask | src.container.task.ArticleTask | src.container.task.WechatTask
        :return:
        """
        if task.get_task_type() == Type.author:
            AuthorWorker.catch(task.author_page_id)
        elif task.get_task_type() == Type.question:
            QuestionWorker.catch(task.question_id)
        elif task.get_task_type() == Type.answer:
            AnswerWorker.catch(task.answer_id)
        elif task.get_task_type() == Type.collection:
            CollectionWorker.catch(task.collection_id)
        elif task.get_task_type() == Type.topic:
            TopicWorker.catch(task.topic_id)
        elif task.get_task_type() == Type.column:
            ColumnWorker.catch(task.column_id)
        elif task.get_task_type() == Type.article:
            ColumnWorker.catch(task.column_id)
        elif task.get_task_type() == Type.wechat:
            WechatWorker.catch(task.account_id)
        else:
            Debug.logger.info(u"任务类别无法识别")
            Debug.logger.info(u"当前类别为" + task.get_task_type())
        return

    @staticmethod
    def format_raw_answer(raw_answer):
        """
        在zhihu-oauth库的Answer对象中获取信息
        :type raw_answer: src.lib.oauth.zhihu_oauth.Answer
        :return: dict
        """
        raw_answer_dict = raw_answer.pure_data.get(u'data', None)
        if not raw_answer_dict:
            # 数据为空说明其数据应在cache字段中
            raw_answer_dict = raw_answer.pure_data.get(u'cache', {})

        answer = {}
        #   有些数据只能从类属性中获取，直接取数据的话取不到(懒加载)，很坑，只能这样了= =
        answer[u'comment_count'] = raw_answer.comment_count
        answer[u'content'] = raw_answer.content
        answer[u'created_time'] = raw_answer.created_time
        answer[u'updated_time'] = raw_answer.updated_time
        answer[u'is_copyable'] = raw_answer.is_copyable
        answer[u'thanks_count'] = raw_answer.thanks_count
        answer[u'voteup_count'] = raw_answer.voteup_count

        # 特殊key
        answer[u"author_id"] = raw_answer_dict[u'author'][u'id']
        answer[u"author_name"] = raw_answer_dict[u'author'][u'name']
        answer[u"author_headline"] = raw_answer_dict[u'author'][u'headline']
        answer[u"author_avatar_url"] = raw_answer_dict[u'author'][u'avatar_url']
        answer[u"author_gender"] = raw_answer_dict[u'author'].get(u'gender', 0)

        answer[u"answer_id"] = raw_answer_dict[u'id']
        answer[u"question_id"] = raw_answer_dict[u'question'][u'id']

        question_key_list = [
            u"title",
            u"detail",
            u"answer_count",
            u"comment_count",
            u"follower_count",
            u"updated_time",
        ]
        question = {}
        for question_key in question_key_list :
            question[question_key] = getattr(raw_answer.question, question_key, u'')
        #   这个要单取。。。
        question[u"question_id"] = getattr(raw_answer.question, u'_id', '')
        return answer, question

    @staticmethod
    def format_article(column_id, raw_article):
        article_key_list = [
            u"title",  # 标题
            u"updated_time",  # 更新时间戳
            u"voteup_count",  # 赞同数
            u"image_url",  # 创建时间戳
            u"content",  # 内容(html，巨长)
            u"comment_count",  # 评论数
        ]
        article = {}
        for key in article_key_list:
            article[key] = getattr(raw_article, key, u'')
        article[u'column_id'] = column_id
        article[u'article_id'] = getattr(raw_article, u'id', u'')

        raw_article_dict = raw_article.pure_data.get(u'data', None)
        if not raw_article_dict:
            # 数据为空说明其数据应在cache字段中
            raw_article_dict = raw_article.pure_data.get(u'cache', {})

        article[u'author_id'] = raw_article_dict[u'author'][u'id']
        article[u'author_name'] = raw_article_dict[u'author'][u'name']
        article[u'author_headline'] = raw_article_dict[u'author'][u'headline']
        article[u'author_avatar_url'] = raw_article_dict[u'author'][u'avatar_url']
        article[u'author_gender'] = raw_article_dict[u'author'][u'gender']

        return article

    @staticmethod
    def save_record_list(table_name, record_list):
        """
        将数据保存到数据库中
        :return:
        """
        for record in record_list:
            DB.save(record, table_name)
        DB.commit()
        return


class QuestionWorker(object):
    @staticmethod
    def catch(question_id):
        question = Worker.zhihu_client.question(question_id)
        question_info = QuestionWorker.format_question(question)
        Worker.save_record_list(u'Question', [question_info])

        counter = 0
        answer_list = []
        for raw_answer in question.answers:
            counter += 1
            Debug.logger.info(u'正在抓取第{}个回答'.format(counter))
            try:
                answer, question = Worker.format_raw_answer(raw_answer)
            except Exception as e:
                #   问题/答案不存在，自动跳过
                continue
            answer_list.append(answer)
        Worker.save_record_list(u'Answer', answer_list)
        return

    @staticmethod
    def format_question(question_info):
        item_key_list = [
            u'answer_count',
            u'comment_count',
            u'follower_count',
            u'title',
            u'detail',
            u'updated_time',
        ]
        info = {}
        for key in item_key_list:
            info[key] = getattr(question_info, key, u'')

        info[u'question_id'] = getattr(question_info, u'_id', u'')

        return info

class AnswerWorker(object):
    @staticmethod
    def catch(answer_id):
        raw_answer = Worker.zhihu_client.answer(answer_id)
        try:
            answer, question = Worker.format_raw_answer(raw_answer)
        except Exception as e:
            #   问题/答案不存在，自动跳过
            return
        Worker.save_record_list(u'Question', [question])
        Worker.save_record_list(u'Answer', [answer])
        return



class AuthorWorker(object):
    @staticmethod
    def catch(author_page_id):
        author = Worker.zhihu_client.people(author_page_id)
        author_info = AuthorWorker.format_author(author, author_page_id)
        Worker.save_record_list(u'Author', [author_info])

        answer_list = []
        question_list = []
        counter = 0
        for raw_answer in author.answers:
            counter += 1
            Debug.logger.info(u'正在抓取第{}个回答'.format(counter))
            try:
                answer, question = Worker.format_raw_answer(raw_answer)
            except Exception as e:
                #   问题/答案不存在，自动跳过
                continue
            answer_list.append(answer)
            question_list.append(question)
        Worker.save_record_list(u'Answer', answer_list)
        Worker.save_record_list(u'Question', question_list)
        return

    @staticmethod
    def format_author(raw_author_info, author_page_id=u''):
        """
        格式化用户信息，方便存入
        :type raw_author_info: dict
        :type author_page_id: str 用户主页id，由于接口中未返回，只能钦定了←_←
        :return: dict
        """
        item_key_list = [
            u"answer_count",
            u"articles_count",
            u"avatar_url",
            u"columns_count",
            u"description",
            u"favorite_count",
            u"favorited_count",
            u"follower_count",
            u"following_columns_count",
            u"following_count",
            u"following_question_count",
            u"following_topic_count",
            u"gender",
            u"headline",
            u"name",
            u"question_count",
            u"shared_count",
            u"is_bind_sina",
            u"thanked_count",
            u"sina_weibo_name",
            u"sina_weibo_url",
            u"voteup_count",
        ]
        info = {}
        for key in item_key_list:
            info[key] = getattr(raw_author_info,key, u'')
        info[u'author_id'] = getattr(raw_author_info, u'id', u'')

        # 特殊映射关系
        info[u"author_page_id"] = author_page_id  # 用户页面id，随时会更换
        return info


class CollectionWorker(object):
    @staticmethod
    def catch(collection_id):
        collection = Worker.zhihu_client.collection(collection_id)

        answer_id_list = []

        answer_list = []
        question_list = []
        counter = 0
        for raw_answer in collection.answers:
            counter += 1
            Debug.logger.info(u'正在抓取第{}个回答'.format(counter))
            try:
                answer, question = Worker.format_raw_answer(raw_answer)
            except Exception as e:
                #   问题/答案不存在，自动跳过
                continue
            answer_id = str(answer[u'answer_id'])
            answer_id_list.append(answer_id)

            answer_list.append(answer)
            question_list.append(question)
        Worker.save_record_list(u'Answer', answer_list)
        Worker.save_record_list(u'Question', question_list)

        collected_answer_id_list = ','.join(answer_id_list)
        collection_info = CollectionWorker.format_collection(collection, collected_answer_id_list)
        Worker.save_record_list(u'Collection', [collection_info])
        return

    @staticmethod
    def format_collection(collection, collected_answer_id_list=''):
        u"""

        :param collection: src.lib.oauth.zhihu_oauth.Collection
        :param collected_answer_id_list:
        :return:
        """
        info = {}
        info[u'answer_count'] = collection.answer_count
        info[u'comment_count'] = collection.comment_count
        info[u'created_time'] = collection.created_time
        info[u'description'] = collection.description
        info[u'follower_count'] = collection.follower_count
        info[u'title'] = collection.title
        info[u'updated_time'] = collection.updated_time

        # 特殊映射关系
        info[u'collection_id'] = collection.id
        info[u'creator_id'] = collection.creator.id
        info[u'creator_name'] = collection.creator.name
        info[u'creator_headline'] = collection.creator.headline
        info[u'creator_avatar_url'] = collection.creator.avatar_url

        info[u"collected_answer_id_list"] = collected_answer_id_list
        return info


class TopicWorker(object):
    @staticmethod
    def catch(topic_id):
        topic = Worker.zhihu_client.topic(topic_id)
        answer_id_list = []

        answer_list = []
        question_list = []
        counter = 0
        for raw_answer in topic.best_answers:
            counter += 1
            Debug.logger.info(u'正在抓取第{}个回答'.format(counter))
            try:
                answer, question = Worker.format_raw_answer(raw_answer)
            except Exception as e:
                #   问题/答案不存在，自动跳过
                continue

            answer_id = str(answer[u'answer_id'])
            answer_id_list.append(answer_id)

            answer_list.append(answer)
            question_list.append(question)
        Worker.save_record_list(u'Answer', answer_list)
        Worker.save_record_list(u'Question', question_list)

        answer_id_list = ','.join(answer_id_list)
        topic_info = TopicWorker.format_topic(topic, answer_id_list)
        Worker.save_record_list(u'Topic', [topic_info])
        return

    @staticmethod
    def format_topic(topic_info, best_answer_id_list=''):
        item_key_list = [
            u'best_answerers_count',
            u'best_answers_count',
            u'excerpt',
            u'followers_count',
            u'introduction',
            u'name',
            u'questions_count',
            u'unanswered_count',
            u'avatar_url'
        ]
        info = {}
        for item_key in item_key_list:
            info[item_key] = getattr(topic_info, item_key, '')

        info[u'topic_id'] = topic_info._id
        info[u"best_answer_id_list"] = best_answer_id_list
        return info


class ColumnWorker(object):
    @staticmethod
    def catch(column_id):
        column = Worker.zhihu_client.column(column_id)
        column_info = ColumnWorker.format_column(column)
        Worker.save_record_list(u'Column', [column_info])

        article_list = []
        counter = 0
        for raw_article in column.articles:
            counter += 1
            Debug.logger.info(u'正在抓取第{}篇文章'.format(counter))
            article = Worker.format_article(column_id, raw_article)
            article_list.append(article)

        Worker.save_record_list(u'Article', article_list)
        return

    @staticmethod
    def format_column(raw_column):
        u"""

        :param raw_column: src.lib.oauth.zhihu_oauth.zhcls.Column
        :return:
        """
        column_key_list = [
            u'title',
            u'article_count',
            u'description',
            u'follower_count',
            u'image_url',
        ]
        column_info = {}
        for key in column_key_list:
            column_info[key] = getattr(raw_column, key, u'')

        column_info[u'column_id'] = raw_column._id

        return column_info


class WechatWorker(object):
    @staticmethod
    def catch(account_id):
        # 关键就在这里了

        base_sleep_time = 5
        max_sleep_time = 10

        article_url_index_list = ["1512979341021", "1511323341521", "1507833141224", "1505212841818", "1502698241621", "1502698341620", "1500644541618", "1497925241016", "1497925341011", "1495807441114", "1495807541111", "1493071941911", "1493072041914", "1490972541517", "1488874341717", "1486725641615", "1486725741617", "1484930641707", "1484930741716", "1482856741818", "1480908241421", "1480908341415", "1475887641412", "1475887741419", "1469894441014", "1469894541018", "1465077041721", "1458529441330", "1458529541313", "1455846941917", "1449954641728", "1449954741716", "1445760441223", "1442232741957", "1436942941239", "1431442241773", "1427333541060", "1416918741450", "1406452941960", "1402934641360", "1402934741348", "1395802841154", "1389419341575", "1389419441535", "1383288141737", "1383288241752", "1373612541543", "1371690541748", "1286796841760", "1281614541842", "1281614641886", "1274230941039", "1272784541079", "1266835641754", "1260330541865", "1260330641840", "1252951241057", "1251267941263", "1242069841548", "1228581041939", "1218471041433", "1218471141451", "1212932841724", "1212932941775", "1203394841418", "1203394941448", "1203395041454", "1196253541858", "1187836041460", "1178267041436", "1167408641748", "1159811341497", "1159811441495", "1156319641354", "1151766441648", "1146085941963", "1146086041927", "1146086141948", "1139325541445", "1139325641448", "1132584141642", "1132584241627", "1130390341842", "1130390441839", "1065045341251", "1063479941946", "1063480041949", "1059419941448", "1059420041439", "1057297141233", "1057297241248", "1053947741551", "1050595441072", "1050595541040", "1049165641760", "1049165741733", "1049165841757", "1034310841869", "1027887641648", "1019736341548", "1019736441560", "1011352141137", "1009199841248", "1006203441442", "1006203541466", "1002231641723", "1002231741742", "1002231841783", "998949341863", "992820241551", "986542541445", "983412041460", "983412141436", "981002941842", "981003041857", "977698941942", "973292241987", "973292341975", "964104141769", "964104241739", "955040041654", "955040141633", "946020641954", "946020741942", "934410541248", "934410641251", "924279341675", "924279441652", "910008741966", "910008841933", "910008941930", "891400041978", "856355741254", "856355841242", "855226441366", "855226541342", "853467741993", "853467841936", "843877141555", "843877241550", "833625641563", "833625741542", "825891641145", "825891741157", "812399741254", "812399841230", "798237241257", "798237341242", "798237441251", "785458641081", "785458741024", "776188541649", "776188641645", "765588941854", "765589041847", "758261841945", "758261941939", "752187641948", "752187741945", "747438341450", "747438441427", "738753341360", "738753441339", "730048341227", "730048441260", "724094541821", "724094641868", "714360141036", "714360241045", "714360341063", "706305541451", "696732441557", "696732541563", "680962441939", "680962541912", "670403641536", "660745441336", "660745541390", "647175441245", "647175541263", "565285641236", "557788641675", "557788741630", "548926841065", "548926941024", "541745341731", "541745441739", "534975441430", "534975541441", "528476241560", "528476341536", "524612141266", "524612241258", "521720941230", "521721041257", "521721141250", "519593241943", "519593341933", "514845541954", "514845641927", "511818041453", "511818141447", "511818241439", "509770841360", "493611741136", "493611841163", "489831741339", "489831841340", "484918441633", "484918541645", "481599141951", "481599241921", "481599341945", "479013141851", "479013241821", "475361441257", "465316641433", "465316741442", "463595041123", "463595141136", "461746041945", "461746141972", "458756241857", "458756341842", "458303941548", "458304041570", "456986541163", "456986641151", "456986741163", "450504141457", "450504241451", "449589241560", "449589341551", "447814941636", "447815041633", "444107641850", "444107741848", "441055841272", "441055941251", "438850341842", "437382241515", "437382341584", "437382441581", "435523941972", "435524041948", "430369241633", "430369341645", "426899441044", "426899541042", "421953541445", "421953641433", "418628041445", "418628141448", "414981641360", "414981741335", "411293841854", "411293941818", "409550041045", "409550141045", "409550241036", "406954041236", "406954141287", "404664841648", "402898741445", "386070141354", "386070241363", "385458241139", "385458341169", "382835241945", "382835341948", "378018441427", "378018541436", "374791941927", "374792041921", "374792141936", "373305741488", "370712741818", "370712841849", "370056641036", "370056741066", "369569741657", "369569841651", "369027441139", "368231241027", "368231341024", "367611441757", "367611541730", "366280941271", "366281041233", "366281141272", "365687041766", "365687141749", "365090641648", "365090741636", "364326941324", "364010641354", "363596341960", "363240641124", "363240741151", "363240841115", "351473241836", "350123541557", "350123641548", "349226641236", "349226741227", "347236641351", "347236741360", "345140541733", "345140641745", "344643041251", "344643141254", "342812741736", "342812841754", "342191941445", "342192041430", "340576341357", "340576441354", "338683041742", "338683141775", "336114041335", "336114141327", "336114241380", "335572241744", "335572341739", "335572441736", "333710241657", "333710341633", "332779641042", "332779741038", "332779841063", "332351741353", "332351841357", "331681441154", "331681541175", "329861841939", "329861941951", "328689241165", "323841041739", "323841141742", "322732341647", "322732441633", "321842841845", "321842941833", "320804741539", "320804841551", "319533641751", "319533741746", "319533841733", "306611741642", "304432241121", "304432341144", "302772441251", "302772541245", "299141841254", "297413541251", "295127741654", "294135141036", "294135241056", "294135341036", "291263541863", "291263641837", "289368741348", "289368841363", "289368941336", "288016741136", "288016841148", "286799341456", "286799441454", "285517741948", "2852253", "2849284", "2845409", "2845410", "2841367", "2837330", "2837331", "2837332", "2832875", "2832876", "2828932", "2825831", "2822772", "2822773", "2818763", "2749622", "2749623", "2745398", "2740267", "2740268", "2721396", "2713701", "2713702", "2705467", "2702171", "2699642", "2699643", "2688804", "2688805", "2686760", "2680467", "2672744", "2661012", "2661013", "2657230", "2657231", "2651960", "2651961", "2641022", "2629634", "2623584", "2623585", "2609694", "2594365", "2594366", "2584108", "2584109", "2584110", "2578671", "2578672", "2573085", "2573086", "2553887", "2543400", "2543401", "2530147", "2511720", "2511721", "2503394", "2503395", "2499093", "2484625", "2484626", "2373742", "2366559", "2366560", "2366561", "2361843", "2361844", "2347105", "2347106", "2342763", "2342764", "2339702", "2339703", "2333138", "2317428", "2311687", "2311688", "2311689", "2307055", "2307056", "2307057", "2303502", "2303503", "2298190", "2298191", "2293826", "2293827", "2289547", "2289548", "2278617", "2278618", "2274677", "2274678", "2260426", "2260427", "2250413", "2250414", "2247371", "2247372", "2244176", "2244177", "2223148", "2223149", "2219375", "2219376", "2216365", "2216366", "2213042", "2213043", "2159853", "2159854", "2152062", "2152063", "2136963", "2136964", "2135010", "2125120", "2125121", "2122002", "2122003", "2119418", "2116276", "2116277", "2113265", "2108090", "2108091", "2108092", "2108093", "2101184", "2101185", "2098416", "2092540", "2092541", "2085619", "2085620", "2085621", "2083459", "2083460", "2083461", "2080575", "2080576", "2077559", "2074231", "2074232", "2071353", "2071354", "2067243", "2064961", "2064962", "2058674", "2058675", "2055720", "2050488", "2050489", "2050490", "2046673", "2040647", "1998888", "1996591", "1996592", "1993463", "1990725", "1987863", "1984279", "1984280", "1979955", "1976674", "1969809", "1967005", "1967006", "1964045", "1964046", "1960962", "1957757", "1957758", "1954798", "1954799", "1952824", "1952825", "1950704", "1950705", "1919995", "1919996", "1919997", "1915240", "1915241", "1915242", "1902912", "1902913", "1900045", "1900046", "1900047", "1897092", "1863284", "1860497", "1857591", "1857592", "1854812", "1854813", "1854814", "1851725", "1849009", "1846106", "1846107", "1840863", "1838045", "1838046", "1833978", "1833979", "1831184", "1831185", "1831186", "1824757", "1824758", "1822007", "1822008", "1822009", "1819393", "1817710", "1817711", "1815026", "1815027", "1811247", "1811248", "1811249", "1808613", "1808614", "1808615", "1805704", "1805705", "1802252", "1802253", "1802254", "1800401", "1800402", "1795654", "1792293", "1790237", "1787543", "1787544", "1758932", "1735243", "1735244", "1733300", "1733301", "1729149", "1729150", "1724642", "1724643", "1722985", "1722986", "1720893", "1720894", "1718176", "1718177", "1711007", "1708462", "1708463", "1705826", "1705827", "1703824", "1703825", "1703826", "1693354", "1693355", "1687966", "1687967", "1687968", "1685603", "1685604", "1685605", "1682522", "1682523", "1682524", "1680066", "1680067", "1677359", "1677360", "1677361", "1675042", "1675043", "1675044", "1673449", "1673450", "1673451", "1669378", "1669379", "1668884", "1668885", "1651648", "1648927", "1648928", "1648929", "1646297", "1646298", "1646299", "1642045", "1642046", "1642047", "1639315", "1639316", "1635992", "1635993", "1635994", "1634269", "1634270", "1634271", "1631114", "1631115", "1625859", "1625860", "1623203", "1623204", "1623205", "1620675", "1618159", "1618160", "1616436", "1616437", "1616438", "1616439", "1614830", "1614831", "1612620", "1612621", "1590967", "1590968", "1590969", "1590970", "1590971", "1590972", "1590973", "1586102", "1586103", "1583858", "1583859", "1583860", "1582075", "1582076", "1579558", "1579559", "1579560", "1576996", "1576997", "1576998", "1574401", "1574402", "1574403", "1572021", "1572022", "1569475", "1569476", "1567821", "1567822", "1567823", "1565962", "1565963", "1565964", "1563382", "1563383", "1563384", "1560853", "1560854", "1560855", "1560856", "1558103", "1558104", "1558105", "1555512", "1555513", "1552963", "1552964", "1551222", "1538228", "1538229", "1535707", "1535708", "1535709", "1533241", "1533242", "1533243", "1530834", "1530835", "1530836", "1528932", "1528933", "1528934", "1527273", "1527274", "1527275", "1527276", "1524680", "1524681", "1524682", "1524683", "1522132", "1522133", "1522134", "1522135", "1519545", "1519546", "1519547", "1512523", "1512524", "1510034", "1510035", "1510036", "1508067", "1508068", "1488730", "1487462", "1487463", "1487464", "1487465", "1484833", "1484834", "1484835", "1477180", "1477181", "1477182", "1475208", "1475209", "1475210", "1473652", "1473653", "1473654", "1471828", "1471829", "1471830", "1469205", "1469206", "1469207", "1466647", "1466648", "1466649", "1464041", "1464042", "1464043", "1461436", "1461437", "1461438", "1458823", "1458824", "1457087", "1457088", "1455252", "1455253", "1455254", "1452387", "1452388", "1449334", "1449335", "1449336", "1446733", "1446734", "1446735", "1444288", "1426870", "1426871", "1426872", "1423889", "1423890", "1421451", "1421452", "1418674", "1418675", "1418676", "1416831", "1415060", "1415061", "1415062", "1412658", "1412659", "1412660", "1410133", "1410134", "1410135", "1407602", "1407603", "1407604", "1404896", "1404897", "1404898", "1402379", "1402380", "1402381", "1400709", "1400710", "1400711", "1398892", "1398893", "1398894", "1396530", "1364060", "1364061", "1361639", "1358906", "1358907", "1354204", "1354205", "1351717", "1348551", "1348552", "1346879", "1346880", "1345284", "1345285", "1343677", "1343678", "1341224", "1341225", "1338672", "1338673", "1334042", "1334043", "1331056", "1331057", "1327541", "1327542", "1324960", "1324961", "1324962", "1320648", "1320649", "1320650", "1318043", "1315414", "1312914", "1312915", "1310922", "1308937", "1305267", "1305268", "1299267", "1299268", "1296285", "1293811", "1290607", "1281000", "1281001", "1278889", "1263001", "1260504", "1260505", "1260506", "1258013", "1258014", "1255600", "1255601", "1253105", "1253106", "1253107", "1251034", "1251035", "1246521", "1246522", "1246523", "1243138", "1243139", "1243140", "1240442", "1240443", "1240444", "1237939", "1237940", "1220635", "1220636", "1220637", "1220638", "1215524", "1215525", "1213056", "1213057", "1211315", "1211316", "1209548", "1209549", "1191386", "1191387", "1188994", "1188995", "1186618", "1184290", "1182088", "1180267", "1180268", "1178291", "1178292", "1176102", "1176103", "1174111", "1174112", "1172483", "1171178", "1169994", "1169995", "1168835", "1168836", "1167651", "1167652", "1166510", "1165411", "1162720", "1160784", "1158935", "1158936", "1157120", "1154779", "1154780", "1152752", "1152753", "1152754", "1150261", "1150262", "1147764", "1147765", "1145328", "1145329", "1143843", "1141991", "1141992", "1139483", "1139484", "1137008", "1137009", "1121126", "1118512", "1118513", "1116049", "1116050", "1113434", "1113435", "1111740", "1111741", "1109344", "1106818", "1104335", "1104336", "1101747", "1101748", "1099229", "1099230", "1096577", "1096578", "1096579", "1093088", "1093089", "1090515", "1088010", "1052802", "1052803", "1048417", "1048418", "1048419", "1048420", "1046135", "1043569", "1039181", "1037608", "1034029", "1034030", "1024504", "1024505", "1021239", "1021240", "1017149", "1017150", "1013045", "1013046", "1013047", "1010647", "1010648", "1007723", "1007724", "1007725", "1005292", "1005293", "1003262", "1003263", "1000464", "1000465", "997582", "997583", "995070", "995072", "995071", "992588", "992589", "990214", "990215", "990216", "990217", "988499", "988500", "986832", "986833", "986834", "984455", "979516", "979517", "976981", "976982", "974560", "972801", "972802", "971154", "968948", "966286", "963906", "941803", "941804", "939178", "939179", "937514", "933760", "925798", "923309", "917931", "917932", "915843", "915844", "912692", "911029", "908436", "908437", "905930", "894041", "889213", "884433", "884434", "882788", "882789", "879303", "879304", "872589", "872590", "865597", "863726", "863727", "859197", "859198", "855410", "855411", "852129", "852130", "809365", "805140", "805141", "803224", "803225", "800940", "800941", "798576", "798577", "793370", "789208", "789209", "786656", "781761", "781762", "780025", "780026", "777509", "777510", "774609", "774610", "771070", "768781", "768782", "761921", "761922", "758404", "758405", "751230", "751231", "740569", "740570", "733579", "733580", "732422", "732423", "729168", "729169", "727058", "727059", "722154", "722155", "720023", "720024", "714161", "714162", "712033", "712034", "686160", "681425", "678115", "678116", "674344", "674345", "673224", "673225", "673226", "663858", "663859", "660108", "660109", "658091", "658092", "656650", "656651", "655301", "655302", "653485", "651965", "651966", "650251", "650252", "647480", "644826", "641264", "641263", "638957", "638958", "636687", "636688", "635420", "626550", "626551", "624616", "595533", "595534", "593915", "591316", "591317", "589612", "587748", "587749", "585923", "585924", "583967", "581961", "581079", "581080", "579881", "579882", "578262", "578263", "576665", "576666", "575218", "575219", "573304", "573305", "571617", "571618", "570508", "570509", "569388", "567136", "565463", "563265", "561747", "560085", "560086", "559151", "559152", "558087", "556778", "555697", "552776", "550265", "550266", "548704", "546289", "546290", "545262", "543362", "512205", "512206", "510748", "510749", "506548", "506549", "505596", "503239", "503240", "501021", "498816", "494786", "494787", "493305", "493306", "489814", "489815", "488658", "487251", "487252", "485848", "485849", "484270", "484271", "482890", "482891", "481463", "481464", "480631", "479760", "479761", "475831", "475832", "474489", "474490", "473050", "457538", "457539", "456118", "456119", "454230", "454231", "452816", "452817", "451674", "450225", "450226", "448858", "448859", "448860", "447228", "447229", "445904", "445905", "444096", "444097", "442691", "441778", "439786", "437987", "437988", "436001", "436002", "433509", "433510", "430563", "428638", "428639", "427148", "427149", "425540", "425541", "425542", "425543", "424210", "424211", "422723", "422724", "420916", "420917", "419516", "418703", "417258", "416873", "406628", "404769", "404770", "403165", "401581", "400095", "399073", "397382", "395407", "393395", "393396", "391343", "388913", "387937", "387938", "387939", "386718", "385472", "385473", "384308", "384309", "383194", "383195", "380754", "377790", "377791", "377060", "376402", "376403", "373653", "373654", "373655", "372480", "372481", "371031", "371032", "367655", "367656", "367657", "367658", "367659", "367660", "367661", "367662", "367663", "367664", "367665", "367666", "367667", "367668", "367669", "367670", "367671", "367672", "367673", "367674", "367675", "367676", "367677", "367678", "367679", "367680", "367681", "367682", "367683", "367684", "367685", "367686", "367687", "367688", "367689", "367690", "367691", "367692", "367693", "367694", "367695", "367696", "367697", "367698", "367699", "367700", "367701", "367702", "367715", "367716", "367717", "367718", "367719", "367720", "367721", "367722", "367723", "367724", "367725", "367726", "367727", "367728", "367729", "367730", "367731", "367732", "367733", "367734", "367735", "367736", "367737", "367738", "367739", "367740", "367741", "367742", "367743", "367744", "367745", "367746", "367747", "367748", "367749", "367750", "1369145241675", "1369145341657", "1366058341746", "1355573241848", "1347188541551", "1347188641552", "1336489041945", "1325127241051", "1313966341257", "1303969441869", "1303969541854", "1293676441066", "1129216741466", "1129216841454", "1129216941445", "1124230541157", "1119666341633", "1114311841369", "1109426041557", "1104277941548", "1101002241142", "1097863741144", "1094779741033", "1094779841057", "1090524741666", "1090524841648", "1081209541148", "1081209641142", "1074592541645", "1074592641636", "1070238741157", "1069143441339", "1067994541648", "1066539441660", "1066539541639", "1065045241251", "891400141936", "877870441260", "875639241333", "875639341321", "871669841537", "871669941563", "870411041042", "870411141030", "869179541054", "864908241763", "864908341737", "861441441142", "509770941351", "508330141669", "508330241654", "508330341654", "505396241880", "505396341821", "501187741430", "501187841442", "501187941433", "497997841972", "497997941928", "496023341236", "475361541260", "473840641445", "473840741451", "472008141642", "472008241660", "469126841033", "466805841824", "466805941848", "466149441824", "466149541828", "466149641824", "465316541433", "402543141845", "402543241833", "402286041740", "402286141754", "400677541554", "400677641542", "400677741537", "397108641257", "391948641242", "391948741263", "388637741648", "388637841675", "317761041260", "317761141236", "317215341257", "316704941630", "316705041642", "315170841663", "315170941648", "312985241721", "312985341745", "309222641430", "309222741480", "306611641621", "2818764", "2813491", "2813492", "2813493", "2809088", "2809089", "2809090", "2805516", "2805517", "2800091", "2800092", "2797563", "2790363", "2786323", "2786324", "2786325", "2781373", "2781374", "2777190", "2767263", "2767264", "2763119", "2759759", "2755981", "2477447", "2477448", "2472458", "2457962", "2445430", "2445431", "2442982", "2430648", "2430649", "2424841", "2424842", "2373741", "2037645", "2031989", "2031990", "2027212", "2027213", "2013557", "2013558", "2009691", "2006832", "2006833", "2003753", "2003754", "1947380", "1947381", "1947382", "1944354", "1941167", "1941168", "1932182", "1927786", "1927787", "1925884", "1922654", "1922655", "1895117", "1895118", "1892725", "1892726", "1889911", "1889912", "1887041", "1887042", "1884267", "1884268", "1868299", "1865072", "1758933", "1755723", "1745676", "1745677", "1743214", "1743215", "1743216", "1740384", "1740385", "1737670", "1737671", "1737672", "1612622", "1610029", "1606857", "1606858", "1606859", "1604051", "1604052", "1604053", "1604054", "1601720", "1601721", "1601722", "1600154", "1600155", "1600156", "1600157", "1598073", "1598074", "1598075", "1595669", "1595670", "1590964", "1590965", "1590966", "1551223", "1551224", "1551225", "1543654", "1543655", "1543656", "1543657", "1540872", "1540873", "1540874", "1538226", "1538227", "1444289", "1444290", "1435383", "1435384", "1435385", "1433698", "1433699", "1433700", "1431700", "1429249", "1429250", "1429251", "1396531", "1396532", "1393970", "1393971", "1391283", "1388687", "1386079", "1386080", "1384359", "1384360", "1382327", "1379858", "1379859", "1377141", "1377142", "1377143", "1374148", "1374149", "1370068", "1370069", "1367607", "1367608", "1365752", "1365753", "1278890", "1273476", "1273477", "1271048", "1271049", "1268815", "1267721", "1267722", "1265524", "1265525", "1265526", "1263000", "1207143", "1207144", "1204773", "1204774", "1202033", "1199644", "1197260", "1197261", "1195465", "1193796", "1193797", "1191385", "1134765", "1134766", "1132197", "1132198", "1129468", "1129469", "1129470", "1126120", "1126121", "1123693", "1123694", "1121125", "1034031", "1031109", "1031110", "1031111", "1027972", "1027973", "1027974", "1027975", "1026043", "1026044", "1026045", "1024503", "850180", "850181", "846420", "846421", "842739", "842740", "839189", "839190", "834990", "834991", "829434", "829435", "829436", "828145", "828146", "820550", "820551", "816026", "816027", "813824", "813825", "811526", "811527", "809364", "708563", "708564", "702555", "702556", "698570", "696214", "696215", "694225", "694226", "689265", "689266", "686159", "624617", "622733", "620474", "620475", "618448", "616308", "615171", "613540", "613541", "611926", "611927", "610099", "543363", "522669", "522670", "521136", "519649", "518129", "518130", "517364", "517365", "516287", "514100", "514101", "473051", "471714", "471715", "470905", "470906", "469927", "469928", "468258", "468259", "466853", "466854", "464175", "464176", "463333", "463334", "462433", "462434", "462435", "461648", "461649", "461650", "460293", "458898", "458899", "367643", "367644", "367645", "367646", "367647", "367648", "367649", "367650", "367651", "367652", "367653", "367654", "367703", "367704", "367705", "367706", "367707", "367708", "367709", "367710", "367711", "367712", "367713", "367714", "367751", "367752", "367753", "367754", "367755", "367756", "367757", "367758", "367759", "367760", "367761", "367762", "367763", "367764", "367765", "367766", "367767", "367768", "367769", "362280441436", "362280541443", "361696741048", "361166241759", "361166341729", "358963441148", "358963541142", "358963641151", "358599241442", "358599341433", "358153041063", "358153141048", "356077841051", "356077941048", "356078041045", "355251441054", "355251541033", "355251641026", "353899541051", "353899641030", "352992141539", "352992241545", "351871841867", "351871941861", "2204770", "2204771", "2186021", "2186022", "2186023", "2184262", "2184263", "2177182", "2167036", "2167037", "2163995", "2163996", "1663088", "1663089", "1660523", "1660524", "1660525", "1657968", "1657969", "1656264", "1656265", "1654230", "1654231", "1651647", "1498870", "1498871", "1498872", "1496351", "1496352", "1496353", "1493868", "1493869", "1490025", "1490026", "1490027", "1488729", "1237941", "1235522", "1235523", "1235524", "1233777", "1233778", "1232005", "1232006", "1229583", "1229584", "1223065", "1223066", "1085377", "1085378", "1081466", "1081467", "1076222", "1076223", "1070677", "1070678", "1068901", "1065722", "1062449", "1054998", "415674", "415675", "414871", "414872", "412641", "412642", "410747", "410748", "409916", "409917", "408443", "406627", "369480", "369481", "367633", "367634", "367635", "367636", "367637", "367638", "367639", "367640", "367641", "367642", "633477541345", "633477641345", "621306941560", "621307041557", "610099541251", "610099641239", "605711241657", "605711341666", "593923441854", "573054841971", "573054941954", "565285541242", "1508069", "1506416", "1506417", "1506418", "1506419", "1503913", "1503914", "1503915", "1501351", "1501352", "1501353", "1501354", "610100", "608058", "608059", "606235", "605033", "605034", "603823", "603824", "598984", "598985", "596970", "596971", "963907", "961471", "961472", "959001", "959002", "957297", "957298", "954877", "952821", "949857", "946211", "946212"]

        #   获取最大页码
        url = 'http://chuansong.me/account/{}'.format(account_id)
        front_page_content = Http.get_content(url)
        max_page =WechatWorker.parse_max_page(front_page_content)
        #   分析网页内容，存到数据库里
        column_info = WechatColumnParser(front_page_content).get_column_info()
        column_info[u'column_id'] = account_id
        Worker.save_record_list(u'Column', [column_info])

        Debug.logger.info(u"最大页数抓取完毕，共{max_page}页".format(max_page=max_page))

        index_work_set = OrderedDict()
        #   获取每一页中文章的地址的地址
        for raw_front_page_index in range(0, max_page):
            front_page_index = raw_front_page_index * 12
            request_url = url + '?start={}'.format(front_page_index)
            index_work_set[raw_front_page_index] = request_url

        re_catch_counter = 0
        catch_counter = 0
        while len(index_work_set) > 0 and re_catch_counter <= 20:
            re_catch_counter += 1
            for raw_front_page_index in index_work_set:
                catch_counter += 1
                Debug.logger.info(u'第『{}』遍抓取数据'.format(re_catch_counter))
                request_url = index_work_set[raw_front_page_index]
                Debug.logger.info(
                    u"开始抓取第{raw_front_page_index}页中的文章链接，剩余{max_page}页".format(raw_front_page_index=raw_front_page_index, max_page=len(index_work_set)))
                request_url_content = Http.get_content(request_url)
                if len(request_url_content) == 0 or catch_counter % 5 == 0:
                    random_sleep_time = base_sleep_time + random.randint(0, max_sleep_time) / 100.0
                    Debug.logger.info(u"随机休眠{}秒".format(random_sleep_time))
                    time.sleep(random_sleep_time)
                    continue

                article_url_index_list += Match.wechat_article_index(content=request_url_content)
                del index_work_set[raw_front_page_index]

        article_count = len(article_url_index_list)
        Debug.logger.info(u"文章链接抓取完毕，共{article_count}篇文章待抓取".format(article_count=article_count))

        index_work_set = OrderedDict()
        for article_url_index in article_url_index_list:
            article_db = DB.query_row('select count(*) as article_count from Article where article_id = {}'.format(article_url_index))
            if article_db['article_count'] > 0:
                continue

            request_url = 'http://chuansong.me/n/{}'.format(article_url_index)
            index_work_set[article_url_index] = request_url

        re_catch_counter = 0
        while len(index_work_set) > 0 and re_catch_counter <= 20:
            re_catch_counter += 1
            for article_url_index in index_work_set:
                request_url = index_work_set[article_url_index]
                Debug.logger.info(u"开始抓取{countert}号文章，剩余{article_count}篇".format(countert=article_url_index,
                                                                                 article_count=len(index_work_set)))
                request_url_content = Http.get_content(request_url)
                if len(request_url_content) == 0:
                    random_sleep_time = base_sleep_time + random.randint(0, max_sleep_time) / 100.0
                    Debug.logger.info(u"随机休眠{}秒".format(random_sleep_time))
                    time.sleep(random_sleep_time)
                    continue

                article_info = WechatArticleParser(request_url_content).get_article_info()
                if len(article_info) > 0:
                    article_info['article_id'] = article_url_index
                    article_info['column_id'] = account_id
                    Worker.save_record_list(u'Article', [article_info])
                del index_work_set[article_url_index]
        return

    @staticmethod
    def format_column(raw_column):
        u"""

        :param raw_column: src.lib.oauth.zhihu_oauth.zhcls.Column
        :return:
        """
        column_key_list = [
            u'title',
            u'article_count',
            u'description',
            u'follower_count',
            u'image_url',
        ]
        column_info = {}
        for key in column_key_list:
            column_info[key] = getattr(raw_column, key, u'')

        column_info[u'column_id'] = raw_column._id

        return column_info


    @staticmethod
    def parse_max_page(content):
        max_page = 1
        try:
            floor = content.index('style="float: right">下一页</a>')
            floor = content.rfind('</a>', 0, floor)
            cell = content.rfind('>', 0, floor)
            max_page = int(content[cell + 1:floor])
            Debug.logger.info(u'答案列表共计{}页'.format(max_page))
        except:
            Debug.logger.info(u'答案列表共计1页')
        finally:
            return max_page


